# Azure DevOps Pipeline for UAT MSC Portal
# Laravel PHP backend + React TypeScript frontend

trigger:
- UAT

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: nodeVersion
    value: '18.x'
  - name: phpVersion
    value: '8.2'
  - name: buildConfiguration
    value: 'production'
  
  # Non-sensitive environment variables
  - name: APP_NAME
    value: 'MSC Platform'
  - name: APP_ENV
    value: 'UAT'
  - name: APP_DEBUG
    value: 'false'
  
  # FHIR Feature Flags
  - name: FHIR_ENABLED
    value: 'true'
  - name: FHIR_SERVICE_ENABLED
    value: 'true'
  - name: FHIR_PATIENT_HANDLER_ENABLED
    value: 'true'
  - name: FHIR_PROVIDER_HANDLER_ENABLED
    value: 'true'
  - name: FHIR_INSURANCE_HANDLER_ENABLED
    value: 'true'
  - name: FHIR_CLINICAL_HANDLER_ENABLED
    value: 'true'
  - name: FHIR_ORDER_HANDLER_ENABLED
    value: 'true'
  - name: FHIR_DEBUG_MODE
    value: 'false'
  - name: FHIR_EPISODE_CACHE_WARMING_ENABLED
    value: 'true'
  
  # Database Configuration
  - name: DB_CONNECTION
    value: 'mysql'
  - name: DB_PORT
    value: '3306'
  - name: DB_SSL_REQUIRED
    value: 'OFF'
  
  # Mail Configuration
  - name: MAIL_MAILER
    value: 'mailgun'
  - name: MAILGUN_ENDPOINT
    value: 'api.mailgun.net'
  - name: VITE_MAIL_FROM_ADDRESS
    value: 'richard@mscwoundcare.com'
  - name: VITE_MAIL_FROM_NAME
    value: 'MSC Wound Care Portal'
  
  # Cache & Queue
  - name: CACHE_DRIVER
    value: 'redis'
  - name: QUEUE_CONNECTION
    value: 'redis'
  - name: REDIS_PORT
    value: '6380'
  - name: REDIS_DATABASE
    value: '2'
  
  # File Storage
  - name: FILESYSTEM_DISK
    value: 'azure'
  
  # API Endpoints
  - name: HEALTH_VOCAB_API_URL
    value: 'http://localhost:8001'
  - name: CMS_API_BASE_URL
    value: 'https://api.coverage.cms.gov/v1'
  - name: CMS_API_CACHE_MINUTES
    value: '60'
  - name: CMS_API_MAX_RETRIES
    value: '3'
  - name: CMS_API_THROTTLE_LIMIT
    value: '9000'
  - name: CMS_API_TIMEOUT
    value: '30'
  - name: DOCUSEAL_API_URL
    value: 'https://api.docuseal.com'
  - name: DOCUSEAL_TIMEOUT
    value: '3000'
  - name: DOCUSEAL_MAX_RETRIES
    value: '3'
  - name: DOCUSEAL_RETRY_DELAY
    value: '1000'
  - name: AVAILITY_API_BASE_URL
    value: 'https://api.availity.com/availity/development-partner/v1'
  - name: AVAILITY_CACHE_ENABLED
    value: 'true'
  - name: AVAILITY_CACHE_TTL
    value: '3600'
  - name: AVAILITY_LOGGING_ENABLED
    value: 'true'
  - name: AVAILITY_LOG_LEVEL
    value: 'info'
  - name: AVAILITY_LOG_REQUEST_BODY
    value: 'false'
  - name: AVAILITY_LOG_RESPONSE_BODY
    value: 'false'
  
  # Azure AI Foundry Configuration
  - name: AZURE_AI_FOUNDRY_ENABLED
    value: 'true'
  - name: AZURE_OPENAI_DEPLOYMENT_NAME
    value: 'gpt-4o'
  - name: AZURE_OPENAI_API_VERSION
    value: '2025-01-01-preview'
  - name: AZURE_OPENAI_REALTIME_DEPLOYMENT_NAME
    value: 'gpt-4o-mini-realtime-preview'
  - name: AZURE_OPENAI_REALTIME_API_VERSION
    value: '2024-10-01-preview'
  - name: AI_DEFAULT_VOICE
    value: 'en-US-JennyNeural'
  - name: AI_REALTIME_VOICE
    value: 'alloy'
  - name: AZURE_SPEECH_REGION
    value: 'eastus2'
  - name: AZURE_DOCUMENT_INTELLIGENCE_API_VERSION
    value: '2024-11-30'
  - name: AZURE_DI_API_VERSION
    value: '2024-02-29-preview'
  
  # ECW Integration
  - name: ECW_ENVIRONMENT
    value: 'sandbox'
  - name: ECW_REDIRECT_URI
    value: 'https://uat-msc-portal.azurewebsites.net/api/ecw/callback'
  - name: ECW_SCOPE
    value: 'patient/Patient.read patient/Observation.read patient/DocumentReference.read'
  
  # Epic Integration
  - name: EPIC_ENVIRONMENT
    value: 'sandbox'
  - name: EPIC_FHIR_BASE_URL
    value: 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4'
  - name: EPIC_AUTHORIZATION_ENDPOINT
    value: 'https://fhir.epic.com/interconnect-fhir-oauth/oauth2/authorize'
  - name: EPIC_TOKEN_ENDPOINT
    value: 'https://fhir.epic.com/interconnect-fhir-oauth/oauth2/token'
  - name: EPIC_SCOPE
    value: 'patient/Patient.read patient/Condition.read patient/Observation.read patient/DiagnosticReport.read'
  - name: EPIC_TIMEOUT
    value: '30'
  
  # Laravel Sanctum
  - name: SESSION_DRIVER
    value: 'redis'
  - name: SESSION_LIFETIME
    value: '120'
  - name: SESSION_SECURE_COOKIE
    value: 'true'
  
  # Insurance AI Assistant Configuration
  - name: AZURE_INSURANCE_ASSISTANT_VOICE_ENABLED
    value: 'true'
  - name: AZURE_INSURANCE_ASSISTANT_MODEL
    value: 'gpt-4o'
  - name: AZURE_INSURANCE_ASSISTANT_TEMPERATURE
    value: '0.7'
  - name: AZURE_INSURANCE_ASSISTANT_MAX_TOKENS
    value: '2000'
  - name: AZURE_INSURANCE_ASSISTANT_CONTEXT_WINDOW
    value: '8000'
  - name: AZURE_INSURANCE_ASSISTANT_SYSTEM_PROMPT
    value: 'You are an insurance AI assistant specialized in wound care insurance verification and form assistance with access to extensive manufacturer field mappings and ML-enhanced recommendations.'
  - name: AZURE_INSURANCE_ASSISTANT_TRAINING_VERSION
    value: '2024-11-20'
  - name: AZURE_INSURANCE_ASSISTANT_CACHE_TTL
    value: '3600'
  - name: AZURE_INSURANCE_ASSISTANT_ML_ENHANCEMENT
    value: 'true'
  - name: AZURE_INSURANCE_ASSISTANT_MANUFACTURER_CONTEXT
    value: 'true'
  - name: AZURE_INSURANCE_ASSISTANT_BEHAVIORAL_TRACKING
    value: 'true'

  # Variable groups for sensitive data (create these in Azure DevOps Library)
  - group: msc-woundcare-portal-secrets-uat
  - group: msc-woundcare-portal-azure-config-uat

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build Frontend and Backend'
    steps:
    
    # Setup Node.js for React frontend
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js $(nodeVersion)'
    
    # Setup PHP for Laravel backend
    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        php -v
      displayName: 'Setup PHP $(phpVersion)'
    
    # Install Composer
    - script: |
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php composer-setup.php --install-dir=/usr/local/bin --filename=composer
        composer --version
      displayName: 'Install Composer'
    
    # Cache Node modules
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(System.DefaultWorkingDirectory)/node_modules'
      displayName: 'Cache Node modules'
    
    # Cache Composer dependencies
    - task: Cache@2
      inputs:
        key: 'composer | "$(Agent.OS)" | composer.lock'
        restoreKeys: |
          composer | "$(Agent.OS)"
        path: '$(System.DefaultWorkingDirectory)/vendor'
      displayName: 'Cache Composer dependencies'
    
    # Install Node dependencies
    - script: npm ci
      displayName: 'Install Node dependencies'
    
    # Install Composer dependencies
    - script: |
        composer install --no-dev --optimize-autoloader --no-interaction
      displayName: 'Install Composer dependencies'
    
    # Create .env file for build and deployment
    - script: |
        cat > .env << EOF
        # Application Configuration
        APP_NAME="$(APP_NAME)"
        APP_ENV=$(APP_ENV)
        APP_DEBUG=$(APP_DEBUG)
        APP_KEY=base64:$(openssl rand -base64 32)
        APP_URL=$(APP_URL)
        
        # FHIR Configuration
        FHIR_ENABLED=$(FHIR_ENABLED)
        FHIR_SERVICE_ENABLED=$(FHIR_SERVICE_ENABLED)
        FHIR_PATIENT_HANDLER_ENABLED=$(FHIR_PATIENT_HANDLER_ENABLED)
        FHIR_PROVIDER_HANDLER_ENABLED=$(FHIR_PROVIDER_HANDLER_ENABLED)
        FHIR_INSURANCE_HANDLER_ENABLED=$(FHIR_INSURANCE_HANDLER_ENABLED)
        FHIR_CLINICAL_HANDLER_ENABLED=$(FHIR_CLINICAL_HANDLER_ENABLED)
        FHIR_ORDER_HANDLER_ENABLED=$(FHIR_ORDER_HANDLER_ENABLED)
        FHIR_DEBUG_MODE=$(FHIR_DEBUG_MODE)
        FHIR_EPISODE_CACHE_WARMING_ENABLED=$(FHIR_EPISODE_CACHE_WARMING_ENABLED)
        
        # Azure FHIR Configuration (from secure variables)
        AZURE_FHIR_CLIENT_ID=$(AZURE_FHIR_CLIENT_ID)
        AZURE_FHIR_CLIENT_SECRET=$(AZURE_FHIR_CLIENT_SECRET)
        AZURE_FHIR_TENANT_ID=$(AZURE_FHIR_TENANT_ID)
        AZURE_FHIR_BASE_URL=$(AZURE_FHIR_BASE_URL)
        AZURE_FHIR_SCOPE=$(AZURE_FHIR_SCOPE)
        AZURE_FHIR_AUTHORITY=$(AZURE_FHIR_AUTHORITY)
        AZURE_FHIR_ENDPOINT=$(AZURE_FHIR_ENDPOINT)
        
        # Database Configuration
        DB_CONNECTION=$(DB_CONNECTION)
        DB_HOST=$(DB_HOST)
        DB_PORT=$(DB_PORT)
        DB_DATABASE=$(DB_DATABASE)
        DB_USERNAME=$(DB_USERNAME)
        DB_PASSWORD="$(DB_PASSWORD)"
        DB_SSL_REQUIRED=$(DB_SSL_REQUIRED)
        
        # Mail Configuration
        MAIL_MAILER=$(MAIL_MAILER)
        MAILGUN_DOMAIN=$(MAILGUN_DOMAIN)
        MAILGUN_SECRET=$(MAILGUN_SECRET)
        MAILGUN_ENDPOINT=$(MAILGUN_ENDPOINT)
        MAILGUN_WEBHOOK_SIGNING_SECRET=$(MAILGUN_WEBHOOK_SIGNING_SECRET)
        VITE_MAIL_FROM_ADDRESS=$(VITE_MAIL_FROM_ADDRESS)
        VITE_MAIL_FROM_NAME="$(VITE_MAIL_FROM_NAME)"
        
        # Cache & Queue Configuration
        CACHE_DRIVER=$(CACHE_DRIVER)
        QUEUE_CONNECTION=$(QUEUE_CONNECTION)
        REDIS_HOST=$(REDIS_HOST)
        REDIS_PASSWORD=$(REDIS_PASSWORD)
        REDIS_PORT=$(REDIS_PORT)
        REDIS_DATABASE=$(REDIS_DATABASE)
        REDIS_CONNECTION=$(REDIS_CONNECTION)
        
        # File Storage
        FILESYSTEM_DISK=$(FILESYSTEM_DISK)
        AZURE_STORAGE_BLOB_URL=$(AZURE_STORAGE_BLOB_URL)
        
        # API Configuration
        HEALTH_VOCAB_API_URL=$(HEALTH_VOCAB_API_URL)
        UMLS_API_KEY=$(UMLS_API_KEY)
        CMS_API_BASE_URL=$(CMS_API_BASE_URL)
        CMS_API_CACHE_MINUTES=$(CMS_API_CACHE_MINUTES)
        CMS_API_MAX_RETRIES=$(CMS_API_MAX_RETRIES)
        CMS_API_THROTTLE_LIMIT=$(CMS_API_THROTTLE_LIMIT)
        CMS_API_TIMEOUT=$(CMS_API_TIMEOUT)
        
        # DocuSeal Configuration
        DOCUSEAL_API_URL=$(DOCUSEAL_API_URL)
        DOCUSEAL_API_KEY=$(DOCUSEAL_API_KEY)
        DOCUSEAL_WEBHOOK_SECRET=$(DOCUSEAL_WEBHOOK_SECRET)
        DOCUSEAL_TIMEOUT=$(DOCUSEAL_TIMEOUT)
        DOCUSEAL_MAX_RETRIES=$(DOCUSEAL_MAX_RETRIES)
        DOCUSEAL_RETRY_DELAY=$(DOCUSEAL_RETRY_DELAY)
        
        # Availity Configuration
        AVAILITY_API_BASE_URL=$(AVAILITY_API_BASE_URL)
        AVAILITY_CLIENT_ID=$(AVAILITY_CLIENT_ID)
        AVAILITY_CLIENT_SECRET=$(AVAILITY_CLIENT_SECRET)
        AVAILITY_CACHE_ENABLED=$(AVAILITY_CACHE_ENABLED)
        AVAILITY_CACHE_TTL=$(AVAILITY_CACHE_TTL)
        AVAILITY_LOGGING_ENABLED=$(AVAILITY_LOGGING_ENABLED)
        AVAILITY_LOG_LEVEL=$(AVAILITY_LOG_LEVEL)
        AVAILITY_LOG_REQUEST_BODY=$(AVAILITY_LOG_REQUEST_BODY)
        AVAILITY_LOG_RESPONSE_BODY=$(AVAILITY_LOG_RESPONSE_BODY)
        
        # Azure Services Configuration
        AZURE_AISERVICES_COGNITIVESERVICES_ENDPOINT=$(AZURE_AISERVICES_COGNITIVESERVICES_ENDPOINT)
        AZURE_AISERVICES_OPENAI_BASE=$(AZURE_AISERVICES_OPENAI_BASE)
        AZURE_SPEECH_ENDPOINT=$(AZURE_SPEECH_ENDPOINT)
        AZURE_SPEECH_KEY=$(AZURE_SPEECH_KEY)
        AZURE_SPEECH_REGION=$(AZURE_SPEECH_REGION)
        AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=$(AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT)
        AZURE_DOCUMENT_INTELLIGENCE_KEY=$(AZURE_DOCUMENT_INTELLIGENCE_KEY)
        AZURE_DOCUMENT_INTELLIGENCE_API_VERSION=$(AZURE_DOCUMENT_INTELLIGENCE_API_VERSION)
        AZURE_DI_ENDPOINT=$(AZURE_DI_ENDPOINT)
        AZURE_DI_KEY=$(AZURE_DI_KEY)
        AZURE_DI_API_VERSION=$(AZURE_DI_API_VERSION)
        
        # Azure AI Foundry Configuration
        AZURE_AI_FOUNDRY_ENABLED=$(AZURE_AI_FOUNDRY_ENABLED)
        AZURE_OPENAI_ENDPOINT=$(AZURE_OPENAI_ENDPOINT)
        AZURE_OPENAI_API_KEY=$(AZURE_OPENAI_API_KEY)
        AZURE_OPENAI_DEPLOYMENT_NAME=$(AZURE_OPENAI_DEPLOYMENT_NAME)
        AZURE_OPENAI_API_VERSION=$(AZURE_OPENAI_API_VERSION)
        AZURE_OPENAI_REALTIME_DEPLOYMENT_NAME=$(AZURE_OPENAI_REALTIME_DEPLOYMENT_NAME)
        AZURE_OPENAI_REALTIME_API_VERSION=$(AZURE_OPENAI_REALTIME_API_VERSION)
        AI_DEFAULT_VOICE=$(AI_DEFAULT_VOICE)
        AI_REALTIME_VOICE=$(AI_REALTIME_VOICE)
        
        # ECW Integration
        ECW_CLIENT_ID=$(ECW_CLIENT_ID)
        ECW_CLIENT_SECRET=$(ECW_CLIENT_SECRET)
        ECW_ENVIRONMENT=$(ECW_ENVIRONMENT)
        ECW_REDIRECT_URI=$(ECW_REDIRECT_URI)
        ECW_SCOPE="$(ECW_SCOPE)"
        
        # Epic Integration
        EPIC_CLIENT_ID=$(EPIC_CLIENT_ID)
        EPIC_CLIENT_SECRET=$(EPIC_CLIENT_SECRET)
        EPIC_ENVIRONMENT=$(EPIC_ENVIRONMENT)
        EPIC_FHIR_BASE_URL=$(EPIC_FHIR_BASE_URL)
        EPIC_AUTHORIZATION_ENDPOINT=$(EPIC_AUTHORIZATION_ENDPOINT)
        EPIC_TOKEN_ENDPOINT=$(EPIC_TOKEN_ENDPOINT)
        EPIC_SCOPE="$(EPIC_SCOPE)"
        EPIC_TIMEOUT=$(EPIC_TIMEOUT)
        
        # Laravel Sanctum Configuration
        SESSION_DOMAIN=$(SESSION_DOMAIN)
        SESSION_DRIVER=$(SESSION_DRIVER)
        SESSION_LIFETIME=$(SESSION_LIFETIME)
        SESSION_SECURE_COOKIE=$(SESSION_SECURE_COOKIE)
        SANCTUM_STATEFUL_DOMAINS=$(SANCTUM_STATEFUL_DOMAINS)
        
        # Additional API Keys
        SUPERINTEREFACE_API_KEY=$(SUPERINTEREFACE_API_KEY)
        INTERCOM_ACCESS_TOKEN=$(INTERCOM_ACCESS_TOKEN)
        GOOGLE_MAPS_API_KEY=$(GOOGLE_MAPS_API_KEY)
        VITE_GOOGLE_MAPS_API_KEY=$(VITE_GOOGLE_MAPS_API_KEY)
        FIRECRAWL_API_KEY=$(FIRECRAWL_API_KEY)
        
        # Insurance AI Assistant Configuration
        AZURE_INSURANCE_ASSISTANT_ID=$(AZURE_INSURANCE_ASSISTANT_ID)
        AZURE_INSURANCE_ASSISTANT_VOICE_ENABLED=$(AZURE_INSURANCE_ASSISTANT_VOICE_ENABLED)
        AZURE_INSURANCE_ASSISTANT_MODEL=$(AZURE_INSURANCE_ASSISTANT_MODEL)
        AZURE_INSURANCE_ASSISTANT_TEMPERATURE=$(AZURE_INSURANCE_ASSISTANT_TEMPERATURE)
        AZURE_INSURANCE_ASSISTANT_MAX_TOKENS=$(AZURE_INSURANCE_ASSISTANT_MAX_TOKENS)
        AZURE_INSURANCE_ASSISTANT_CONTEXT_WINDOW=$(AZURE_INSURANCE_ASSISTANT_CONTEXT_WINDOW)
        AZURE_INSURANCE_ASSISTANT_SYSTEM_PROMPT="$(AZURE_INSURANCE_ASSISTANT_SYSTEM_PROMPT)"
        AZURE_INSURANCE_ASSISTANT_TRAINING_VERSION=$(AZURE_INSURANCE_ASSISTANT_TRAINING_VERSION)
        AZURE_INSURANCE_ASSISTANT_CACHE_TTL=$(AZURE_INSURANCE_ASSISTANT_CACHE_TTL)
        AZURE_INSURANCE_ASSISTANT_ML_ENHANCEMENT=$(AZURE_INSURANCE_ASSISTANT_ML_ENHANCEMENT)
        AZURE_INSURANCE_ASSISTANT_MANUFACTURER_CONTEXT=$(AZURE_INSURANCE_ASSISTANT_MANUFACTURER_CONTEXT)
        AZURE_INSURANCE_ASSISTANT_BEHAVIORAL_TRACKING=$(AZURE_INSURANCE_ASSISTANT_BEHAVIORAL_TRACKING)
        
        # Vite Configuration
        VITE_APP_NAME="$(APP_NAME)"
        VITE_PUSHER_APP_KEY=$(VITE_PUSHER_APP_KEY)
        VITE_PUSHER_APP_CLUSTER=$(VITE_PUSHER_APP_CLUSTER)
        EOF
      displayName: 'Create environment file'
    
    # Generate Laravel app key
    - script: php artisan key:generate --force
      displayName: 'Generate Laravel application key'
    
    # TypeScript type checking
    - script: npm run type-check
      displayName: 'TypeScript type checking'
    
    # ESLint checking
    - script: npm run lint
      displayName: 'ESLint checking'
    
    # Build React frontend with Vite
    - script: npm run prod
      displayName: 'Build React frontend'
    
    # Run JavaScript/TypeScript tests
    - script: npm run test:coverage
      displayName: 'Run frontend tests'
    
    # Publish test results
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        testRunTitle: 'Frontend Tests'
      displayName: 'Publish frontend test results'
    
    # Publish code coverage
    - task: PublishCodeCoverageResults@2
      condition: succeededOrFailed()
      inputs:
        summaryFileLocation: '**/coverage/cobertura-coverage.xml'
      displayName: 'Publish code coverage'
    
    # Optimize Laravel for production
    - script: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
      displayName: 'Optimize Laravel'
    
    # Clean up development files
    - script: |
        rm -rf node_modules
        rm -rf tests
        rm -rf .git
        rm -f .env.example
        rm -f webpack.mix.js
        rm -f package-lock.json
      displayName: 'Clean development files'
    
    # Create deployment package
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/uat-msc-portal.zip'
        replaceExistingArchive: true
      displayName: 'Create deployment package'
    
    # Publish build artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'uat-msc-portal-build'
      displayName: 'Publish build artifacts'

- stage: Deploy
  displayName: 'Deploy to UAT'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployUAT
    displayName: 'Deploy to UAT App Service'
    environment: 'UAT'
    strategy:
      runOnce:
        deploy:
          steps:
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'uat-msc-portal-build'
              targetPath: '$(Pipeline.Workspace)/uat-msc-portal-build'
            displayName: 'Download build artifacts'
          
          # Deploy to Azure App Service
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure-Service-Connection'  # Replace with your service connection name
              appType: 'webAppLinux'
              appName: 'uat-msc-portal'  # Replace with your UAT app service name
              package: '$(Pipeline.Workspace)/uat-msc-portal-build/uat-msc-portal.zip'
              runtimeStack: 'PHP|8.2'
              startUpCommand: |
                cp /home/site/wwwroot/.env.production /home/site/wwwroot/.env
                php /home/site/wwwroot/artisan migrate --force
                php /home/site/wwwroot/artisan config:cache
                php /home/site/wwwroot/artisan route:cache
                php /home/site/wwwroot/artisan view:cache
            displayName: 'Deploy to UAT App Service'
          
          # Run post-deployment tasks
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure-Service-Connection'  # Replace with your service connection name
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deployment completed successfully"
                echo "UAT Environment: https://uat-msc-portal.azurewebsites.net"
            displayName: 'Post-deployment tasks'
